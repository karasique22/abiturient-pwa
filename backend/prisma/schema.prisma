generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserRoles")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  fullName      String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  phone         String         @unique
  applications  Application[]
  notifications Notification[]
  Session       Session[]
  roles         Role[]         @relation("UserRoles")
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  refreshHash String   @unique
  userAgent   String?
  ip          String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Program {
  id            String           @id @default(uuid())
  title         String           @unique
  description   String
  startDate     DateTime?
  priceRub      Decimal?         @db.Decimal(10, 2)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  slug          String           @unique
  category      ProgramCategory
  durationHours Int?
  content       Json?
  curatorInfo   String?
  curatorName   String
  document      ProgramDocument?
  durationYears Int?
  level         ProgramLevel?
  format        ProgramFormat
  applications  Application[]
  images        ProgramImage[]
}

model ProgramImage {
  id        String  @id @default(uuid())
  programId String
  url       String
  alt       String?
  order     Int     @default(0)
  program   Program @relation(fields: [programId], references: [id])

  @@index([programId])
}

model Event {
  id           String        @id @default(uuid())
  title        String        @unique
  description  String
  dateTime     DateTime
  address      String
  category     EventCategory
  curatorName  String
  curatorInfo  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  coverUrl     String?
  slug         String        @unique
  applications Application[]
  images       EventImage[]
}

model EventImage {
  id      String  @id @default(uuid())
  eventId String
  url     String
  alt     String?
  order   Int     @default(0)
  event   Event   @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

model Application {
  id          String            @id @default(uuid())
  programId   String?
  userId      String
  comment     String?
  isActive    Boolean           @default(true)
  submittedAt DateTime          @default(now())
  eventId     String?
  status      ApplicationStatus @default(NEW)
  event       Event?            @relation(fields: [eventId], references: [id])
  program     Program?          @relation(fields: [programId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@index([programId])
  @@index([eventId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}

enum EventCategory {
  MASTER_CLASS
  TRIAL
  LESSON
}

enum ProgramCategory {
  PROFESSIONAL_RETRAINING
  PROFESSIONAL_DEVELOPMENT
}

enum ProgramLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProgramDocument {
  DIPLOMA_PROFESSIONAL_RETRAINING
  DIPLOMA_PROFESSIONAL_DEVELOPMENT
  CERTIFICATE_OF_COMPLETION
}

enum ProgramFormat {
  OFFLINE
  ONLINE
}

enum ApplicationStatus {
  NEW
  CANCELLED
  APPROVED
}
