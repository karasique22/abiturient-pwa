generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ───────────── ENUM ─────────────
 */

enum EventCategory {
  MASTER_CLASS // мастер-класс
  TRIAL // пробное занятие
  LESSON // онлайн-урок
}

enum ProgramCategory {
  PROFESSIONAL_RETRAINING // профессиональная переподготовка
  PROFESSIONAL_DEVELOPMENT // повышение квалификации
}

enum ProgramLevel {
  BEGINNER // начальный
  INTERMEDIATE // средний
  ADVANCED // продвинутый
}

enum ProgramDocument {
  DIPLOMA_PROFESSIONAL_RETRAINING // диплом о профессиональной переподготовке
  DIPLOMA_PROFESSIONAL_DEVELOPMENT // диплом о повышении квалификации
  CERTIFICATE_OF_COMPLETION // сертификат об обучении
}

enum ProgramFormat {
  OFFLINE
  ONLINE
}

/**
 * ──────────── ОБЩИЕ МОДЕЛИ ───────────
 */

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[] @relation("UserRoles")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  fullName      String?
  roles         Role[]         @relation("UserRoles")
  applications  Application[]
  notifications Notification[]
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Session       Session[]
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  refreshHash String   @unique
  userAgent   String?
  ip          String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

/**
 * ───────────── PROGRAM ─────────────
 */

model Program {
  id            String         @id @default(uuid())
  slug          String         @unique
  title         String         @unique
  description   String
  durationHours Int?
  durationYears Int?
  category      ProgramCategory
  level         ProgramLevel?
  document      ProgramDocument?
  format        ProgramFormat
  content       Json?
  curatorName  String
  curatorInfo  String?
  startDate     DateTime?
  priceRub      Decimal?       @db.Decimal(10, 2)
  applications  Application[]
  images        ProgramImage[]
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ProgramImage {
  id        String  @id @default(uuid())
  programId String
  url       String
  alt       String?
  order     Int     @default(0)

  program Program @relation(fields: [programId], references: [id])

  @@index([programId])
}

/**
 * ───────────── EVENT ─────────────
 */

model Event {
  id           String        @id @default(uuid())
  slug         String        @unique
  title        String        @unique
  description  String
  dateTime     DateTime
  address      String
  category     EventCategory
  curatorName  String
  curatorInfo  String?
  applications Application[]
  images       EventImage[]
  coverUrl   String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model EventImage {
  id      String  @id @default(uuid())
  eventId String
  url     String
  alt     String?
  order   Int     @default(0)

  event Event @relation(fields: [eventId], references: [id])

  @@index([eventId])
}

/**
 * ──────────── APPLICATION ───────────
 */

model Application {
  id          String   @id @default(uuid())
  programId   String? // заявки могут относиться либо к программе,
  eventId     String? // либо к событию (одно из полей не-null)
  userId      String
  status      String
  comment     String?
  program     Program? @relation(fields: [programId], references: [id])
  event       Event?   @relation(fields: [eventId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  isActive    Boolean  @default(true)
  submittedAt DateTime @default(now())

  @@index([programId])
  @@index([eventId])
}

/**
 * ──────────── NOTIFICATION / LOG ───────────
 */

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model Log {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
}
